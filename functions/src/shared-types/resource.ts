
import type { Timestamp } from 'firebase/firestore';

// Represents an academic resource or publication
export interface Resource {
  id: string; // Firestore document ID
  uploaderId: string; // Firebase User ID of the publisher/uploader
  uploaderName?: string; // Display name of the publisher/uploader
  title: string;
  description: string;
  fileURL?: string; // URL to the main file (e.g., PDF) in Firebase Storage
  fileName?: string; // Original name of the uploaded file
  fileType?: string; // MIME type (e.g., 'application/pdf', 'image/jpeg')
  fileSize?: number; // File size in bytes
  pageCount?: number | null | undefined; // Optional: number of pages in the document
  thumbnailURL?: string; // Optional URL for a preview image
  
  // Categorization
  subject?: string; // Academic subject area (user input initially, can be mapped to subjectId)
  gradeLevel?: string; // Target audience/level (e.g., 'Undergraduate', 'Postgraduate', 'K-12')
  topic?: string; // More specific topic within the subject
  tags?: string[]; // User-defined keywords for discoverability
  
  classId?: string; // ID linking to 'classes' collection
  subjectId?: string; // ID linking to 'subjects' collection
  categoryId?: string; // ID linking to 'categories' collection

  status: 'pending' | 'approved' | 'rejected'; // Moderation status

  // AI Generated content (optional)
  summary?: string; // AI-generated summary of the description or content
  aiKeywords?: string[]; // AI-extracted keywords

  // Engagement metrics (denormalized for easier querying)
  likesCount?: number; // Number of likes received
  commentsCount?: number; // Number of comments received
  // viewCount?: number; // Future: track views
  // downloadCount?: number; // Future: track downloads - replaced by totalDownloads for monetization
  // savedCount?: number; // Future: track bookmarks/saves

  // Monetization related
  totalDownloads?: number;
  totalEarnings?: number;

  // Cover page processing
  coverPageApplied?: boolean;
  processedAt?: Timestamp | string;


  createdAt: Timestamp | string; // Firestore Timestamp or ISO string
  updatedAt: Timestamp | string; // Firestore Timestamp or ISO string
}

// Shape of data coming from the resource creation/edit form
export interface ResourceFormData {
  title: string;
  description: string;
  subject?: string; // User input field, can be used to suggest subjectId
  gradeLevel?: string;
  topic?: string;
  tags?: string; // Comma-separated string from form input, processed into array on submit
  file?: File | null; // The actual file object to be uploaded
  pageCount?: number | null | undefined;
  
  classId?: string;
  subjectId?: string;
  categoryId?: string;
  // status is not directly set by user in form, defaults to 'pending' or handled by admin
}

// For admin-managed entities
export interface AcademicClass {
  id: string;
  class: string; // Changed from name
  createdAt: Timestamp | string;
}

export interface AcademicSubject {
  id: string;
  subject: string; // Changed from name
  createdAt: Timestamp | string;
}

export interface AcademicCategory {
  id: string;
  name: string;
  createdAt: Timestamp | string;
}

// For Admin Uploaded Exams
export interface ExamPaper {
  id?: string; // Will be generated by Firestore if not set before subcollection add
  paperTitle: string; // e.g., "Paper 1", "Marking Scheme"
  fileURL: string;
  fileName: string;
  fileType: string;
  fileSize: number;
  pageCount?: number | null | undefined; // Optional, manual input
  classIds?: string[]; // Each paper can have its own classes
  subjectId?: string; // Each paper can have its own subject
  createdAt: Timestamp | string;
  file?: File; // Temporary, for upload state management
}

export interface ExamSet {
  id: string; // Firestore document ID
  title: string;
  description: string;
  // classIds and subjectId removed from here, moved to ExamPaper
  categoryId?: string; // Optional for exams
  // papers will be stored as a subcollection `examPapers`
  uploaderId: string; // Admin's Firebase User ID
  uploaderName?: string; // Admin's display name
  createdAt: Timestamp | string;
  updatedAt: Timestamp | string;
  status: 'published' | 'draft'; // Exams are admin-uploaded, simpler status
}

export interface ExamSetFormData {
  title: string;
  description: string;
  // classIds and subjectId removed from here
  categoryId?: string;
  papers: Array<Partial<ExamPaper> & { 
    file: File | null;
    classIds?: string[]; // Add to paper form data
    subjectId?: string;  // Add to paper form data
  }>; 
}
